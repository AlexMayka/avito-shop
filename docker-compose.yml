services:
  db:
    image: postgres:13
    container_name: postgres
    env_file:
      - .env
    command: >
      postgres -c max_connections=2000 
               -c shared_buffers=1GB 
               -c work_mem=32MB 
               -c maintenance_work_mem=512MB 
               -c effective_cache_size=6GB 
               -c wal_writer_delay=200ms 
               -c synchronous_commit=off 
               -c checkpoint_timeout=15min 
               -c max_wal_size=2GB 
               -c autovacuum=on 
               -c autovacuum_naptime=30s 
               -c autovacuum_vacuum_scale_factor=0.02
    deploy:
      resources:
        limits:
          cpus: "4"
          memory: 8GB
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U postgres -d shop'" ]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - internal

  db_test:
    image: postgres:13
    container_name: postgres_test
    environment:
      POSTGRES_USER: ${TEST_POSTGRES_USER}
      POSTGRES_PASSWORD: ${TEST_POSTGRES_PASSWORD}
      POSTGRES_DB: ${TEST_POSTGRES_DB}
    ports:
      - "${TEST_POSTGRES_PORT}"
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U ${TEST_POSTGRES_USER} -d ${TEST_POSTGRES_DB}'" ]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - internal

  migrator:
    build:
      context: .
      dockerfile: deploy/Dockerfile
    command: [
      "goose", "-dir", "/migrations", "postgres",
      "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}?sslmode=disable", "up"
    ]
    depends_on:
      db:
        condition: service_healthy
    networks:
      - internal

  api:
    build:
      context: .
      dockerfile: deploy/Dockerfile
    container_name: avito_api
    env_file:
      - .env
    environment:
      SERVER_HOST: "${SERVER_HOST}"
      SERVER_PORT: "${SERVER_PORT}"

      DB_HOST: "${POSTGRES_HOST}"
      DB_PORT: "${POSTGRES_PORT}"
      DB_USER: "${POSTGRES_USER}"
      DB_PASSWORD: "${POSTGRES_PASSWORD}"
      DB_NAME: "${POSTGRES_DB}"

    depends_on:
      db:
        condition: service_healthy

    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"
    networks:
      - internal

networks:
  internal:
    driver: bridge